name: Reusable Golang Cache Manager 

on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: 'Branch name.'
        default: main
        required: true
    secrets:
      GLOBAL_PAT:
        required: true

jobs:
  build-tests-cache:
    runs-on: ubuntu-latest
    env:
      architecture: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'main' }}
      - name: Configure Git for Private Modules
        run: git config --global url."https://${{ secrets.GLOBAL_PAT }}:x-oauth-basic@github.com".insteadOf "https://github.com"
      - name: Go Cache Preflights
        id: go-cache-paths
        run: |
          RUNNER_OS=${{ runner.os }}
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}' | cut -d'.' -f1-2)
          echo "go-version=${GO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
          echo "go-mod=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"
          echo "cache-key=golang-v${GO_VERSION}-${RUNNER_OS,,}-${{ env.architecture }}-tests-checksum-$(echo ${{ hashFiles('**/go.sum') }} | cut -c 1-6)" >> "$GITHUB_OUTPUT"
          echo "cache-key-any=golang-v${GO_VERSION}-${RUNNER_OS,,}-${{ env.architecture }}-tests-checksum-" >> "$GITHUB_OUTPUT"
      - name: Go Cache Restore
        id: go-cache-restore
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ steps.go-cache-paths.outputs.cache-key }}
      - name: Go Cache Clean-up
        if: steps.go-cache-restore.outputs.cache-hit != 'true'
        run: rm -rf ${{ steps.go-cache-paths.outputs.go-build }} ${{ steps.go-cache-paths.outputs.go-mod }}
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.go-cache-paths.outputs.go-version }}
      - name: Go Run Tests 
        if: steps.go-cache-restore.outputs.cache-hit != 'true'
        run: make $(grep '^test-' [Mm]akefile | head -1 | cut -d' ' -f1 | tr -d ':')
        env:
          GOPRIVATE: "github.com/infralight/*,github.com/gofireflyio/*"

  build-app-cache:
    runs-on: ubuntu-latest
    env:
      architecture: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'main' }}
      - name: Configure Git for Private Modules
        run: git config --global url."https://${{ secrets.GLOBAL_PAT }}:x-oauth-basic@github.com".insteadOf "https://github.com"
      - name: Go Cache Preflights
        id: go-cache-paths
        run: |
          RUNNER_OS=${{ runner.os }}
          GO_VERSION=$(grep '^go ' go.mod | awk '{print $2}' | cut -d'.' -f1-2)
          echo "go-version=${GO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "go-build=$(go env GOCACHE)" >> "$GITHUB_OUTPUT"
          echo "go-mod=$(go env GOMODCACHE)" >> "$GITHUB_OUTPUT"
          echo "cache-key=golang-v${GO_VERSION}-${RUNNER_OS,,}-${{ env.architecture }}-build-checksum-$(echo ${{ hashFiles('**/go.sum') }} | cut -c 1-6)" >> "$GITHUB_OUTPUT"
      - name: Go Cache Restore
        id: go-cache-restore
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.go-cache-paths.outputs.go-build }}
            ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ steps.go-cache-paths.outputs.cache-key }}
      - name: Go Cache Clean-up
        if: steps.go-cache-restore.outputs.cache-hit != 'true'
        run: rm -rf ${{ steps.go-cache-paths.outputs.go-build }} ${{ steps.go-cache-paths.outputs.go-mod }}
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ steps.go-cache-paths.outputs.go-version }}
      - name: Go Download and Build All 
        if: steps.go-cache-restore.outputs.cache-hit != 'true'
        env:
          GOPRIVATE: "github.com/infralight/*,github.com/gofireflyio/*"
          GOOS: linux
          GOARCH: arm64
        run: |
          go mod tidy
          go mod download
          go build -o /dev/null ./...
          du -sh ${{ steps.go-cache-paths.outputs.go-build }}
          du -sh ${{ steps.go-cache-paths.outputs.go-mod }}
      - name: Go Build App
        if: steps.go-cache-restore.outputs.cache-hit != 'true' && env.architecture == 'arm64'
        env:
          GOPRIVATE: "github.com/infralight/*,github.com/gofireflyio/*"
        run: |
          targets="ci-build-cache $(grep '^ci-build-' [Mm]akefile | cut -d' ' -f1 | tr -d ':')"
          for target in $targets; do
              # Check if target exists in makefile
              if ! make --dry-run "$target" &>/dev/null; then
                continue 
              fi

              COMMAND=$(make --dry-run "$target" | sed 's/GOARCH\=amd64/GOARCH\=arm64/ig')
              if [[ "$COMMAND" != *"GOARCH=arm64"* ]]; then
                  COMMAND=$(echo "$COMMAND" | sed -E 's/go\s+build/GOARCH\=arm64 go build/')
              fi
              echo "$COMMAND"
              if bash -c "$COMMAND" 2>/dev/null; then
                  break
              fi
          done

