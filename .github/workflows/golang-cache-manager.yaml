name: Reusable Golang Cache Manager 

on:
  workflow_call:
    inputs:
      branch:
        type: string
        description: 'Branch name.'
        default: main
        required: true
      app-name:
        type: string
        description: 'Target to run.'
        required: true
      go-version:
        type: string
        description: 'Go version to use.'
        required: true
    secrets:
      GLOBAL_PAT:
        required: true

env:
  architecture: 'arm64'
  cache-runner-key: 'linux-arm64'

jobs:
  build-tests-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'main' }}
      - name: Configure Git for Private Modules
        run: git config --global url."https://${{ secrets.GLOBAL_PAT }}:x-oauth-basic@github.com".insteadOf "https://github.com"
      - name: Go Cache Preflights
        id: cache-init
        env:
          verb: 'tests'
        run: |
          TARGET=$(find . -name go.mod | wc -l | awk '{print ($1>1)?"${{ inputs.app-name }}":"*"}')
          CALLER=$(if [ $(find . -name go.mod | wc -l) -gt 1 ] && [ "${{ inputs.app-name }}" = "*" ]; then echo "yes"; else echo "no"; fi)

          echo "caller=${CALLER}" >> "$GITHUB_OUTPUT"
          [ "$CALLER" = "yes" ] && exit 0

          if [ "${{ inputs.app-name }}" != "*" ]; then
            GO_VERSION_LONG=${{ inputs.go-version }}
            GO_VERSION=$(echo $GO_VERSION_LONG | cut -d'.' -f1-2)
            APP_DIR="$(make --dry-run ci-build-${{ inputs.app-name }} 2>/dev/null | grep "go build"  | grep -oE '[^ ]+\.go' || echo)"
            APP_DIR="$(dirname $APP_DIR 2>/dev/null || echo)"
            GO_SUM="$([ -z "$APP_DIR" ] && ls **/go.sum | head -n 1 || echo "$APP_DIR/go.sum")"
            CACHE_KEY="golang-v${GO_VERSION}-${{ env.cache-runner-key }}-${{ env.verb }}-${{ inputs.app-name }}-checksum-$(sha256sum $GO_SUM | awk '{print $1}' | cut -c 1-6)"
          else
            GO_VERSION_LONG=$(grep '^go ' go.mod | awk '{print $2}')
            GO_VERSION=$(echo $GO_VERSION_LONG | cut -d'.' -f1-2)
            CACHE_KEY="golang-v${GO_VERSION}-${{ env.cache-runner-key }}-${{ env.verb }}-checksum-$(echo ${{ hashFiles('**/go.sum') }} | cut -c 1-6)"
          fi

          echo "target=${TARGET}" >> "$GITHUB_OUTPUT"
          echo "go-version-long=${GO_VERSION_LONG}" >> "$GITHUB_OUTPUT"
          echo "go-version=${GO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "go-build=/home/runner/.cache/go-build" >> "$GITHUB_OUTPUT"
          echo "go-mod=/home/runner/go/pkg/mod" >> "$GITHUB_OUTPUT"
          echo "cache-key=${CACHE_KEY}" >> "$GITHUB_OUTPUT"
      - name: Go Cache Restore
        if: steps.cache-init.outputs.caller == 'no'
        id: go-cache-restore
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.cache-init.outputs.go-build }}
            ${{ steps.cache-init.outputs.go-mod }}
          key: ${{ steps.cache-init.outputs.cache-key }}
      # - name: Go Cache Clean-up
      #   if: steps.go-cache-restore.outputs.cache-hit != 'true'
      #   run: rm -rf ${{ steps.cache-init.outputs.go-build }} ${{ steps.cache-init.outputs.go-mod }}
      - uses: actions/setup-go@v2
        if: steps.go-cache-restore.outputs.cache-hit != 'true' && steps.cache-init.outputs.caller == 'no'
        with:
          go-version: ${{ steps.cache-init.outputs.go-version-long }}
      - name: Go Run Tests 
        if: steps.go-cache-restore.outputs.cache-hit != 'true' && steps.cache-init.outputs.caller == 'no'
        run: |
          if [ "${{ inputs.app-name }}" != "*" ]; then
            make ${{ format('test-{0}', inputs.app-name) }}
          else
            make $(grep '^test-' [Mm]akefile | head -1 | cut -d' ' -f1 | tr -d ':')
          fi
        env:
          GOPRIVATE: "github.com/infralight/*,github.com/gofireflyio/*"

  build-app-cache:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch || 'main' }}
      - name: Configure Git for Private Modules
        run: git config --global url."https://${{ secrets.GLOBAL_PAT }}:x-oauth-basic@github.com".insteadOf "https://github.com"
      - name: Go Cache Preflights
        id: cache-init
        env:
          verb: 'build'
        run: |
          TARGET=$(find . -name go.mod | wc -l | awk '{print ($1>1)?"${{ inputs.app-name }}":"*"}')
          CALLER=$(if [ $(find . -name go.mod | wc -l) -gt 1 ] && [ "${{ inputs.app-name }}" = "*" ]; then echo "yes"; else echo "no"; fi)

          echo "caller=${CALLER}" >> "$GITHUB_OUTPUT"
          [ "$CALLER" = "yes" ] && exit 0

          if [ "${{ inputs.app-name }}" != "*" ]; then
            GO_VERSION_LONG=${{ inputs.go-version }}
            GO_VERSION=$(echo $GO_VERSION_LONG | cut -d'.' -f1-2)
            APP_DIR="$(make --dry-run ci-build-${{ inputs.app-name }} 2>/dev/null | grep "go build"  | grep -oE '[^ ]+\.go' || echo)"
            APP_DIR="$(dirname $APP_DIR 2>/dev/null || echo)"
            GO_SUM="$([ -z "$APP_DIR" ] && ls **/go.sum | head -n 1 || echo "$APP_DIR/go.sum")"
            CACHE_KEY="golang-v${GO_VERSION}-${{ env.cache-runner-key }}-${{ env.verb }}-${{ inputs.app-name }}-checksum-$(sha256sum $GO_SUM | awk '{print $1}' | cut -c 1-6)"
          else
            GO_VERSION_LONG=$(grep '^go ' go.mod | awk '{print $2}')
            GO_VERSION=$(echo $GO_VERSION_LONG | cut -d'.' -f1-2)
            CACHE_KEY="golang-v${GO_VERSION}-${{ env.cache-runner-key }}-${{ env.verb }}-checksum-$(echo ${{ hashFiles('**/go.sum') }} | cut -c 1-6)"
          fi

          echo "target=${TARGET}" >> "$GITHUB_OUTPUT"
          echo "go-version-long=${GO_VERSION_LONG}" >> "$GITHUB_OUTPUT"
          echo "go-version=${GO_VERSION}" >> "$GITHUB_OUTPUT"
          echo "go-build=/home/runner/.cache/go-build" >> "$GITHUB_OUTPUT"
          echo "go-mod=/home/runner/go/pkg/mod" >> "$GITHUB_OUTPUT"
          echo "cache-key=${CACHE_KEY}" >> "$GITHUB_OUTPUT"

      - name: Go Cache Restore
        if: steps.cache-init.outputs.caller == 'no'
        id: go-cache-restore
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.cache-init.outputs.go-build }}
            ${{ steps.cache-init.outputs.go-mod }}
          key: ${{ steps.cache-init.outputs.cache-key }}
      - name: Call Recurisve Build Cache
        if: steps.cache-init.outputs.caller == 'yes'
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          for file in .github/workflows/ci-*; do
            if grep -q "cached-.*golang-.*\.yaml" "$file"; then
              go_version=$(grep 'go-version:' "$file" | sed 's/.*go-version: \(.*\)/\1/')
              app_name=$(grep 'app-name:' "$file" | sed 's/.*app-name: \(.*\)/\1/')
              if [[ $app_name != *"$"* ]]; then
                gh workflow run firefly-cache-manager.yaml -f app-name="$app_name" -f go-version="$go_version"
              fi
            fi
          done
      # - name: Go Cache Clean-up
      #   if: steps.go-cache-restore.outputs.cache-hit != 'true'
      #   run: rm -rf ${{ steps.cache-init.outputs.go-build }} ${{ steps.cache-init.outputs.go-mod }}
      - uses: actions/setup-go@v2
        if: steps.go-cache-restore.outputs.cache-hit != 'true' && steps.cache-init.outputs.caller == 'no'
        with:
          go-version: ${{ steps.cache-init.outputs.go-version-long }}
      - name: Go Download and Build All 
        if: inputs.app-name == '*' && steps.go-cache-restore.outputs.cache-hit != 'true' && steps.cache-init.outputs.caller == 'no'
        env:
          GOPRIVATE: "github.com/infralight/*,github.com/gofireflyio/*"
          GOOS: linux
          GOARCH: arm64
          CGO_ENABLED: 0
        run: |
          go mod download

          targets="ci-build-cache $(grep '^ci-build-' [Mm]akefile | cut -d' ' -f1 | tr -d ':')"
          for target in $targets; do
              COMMAND=$(make --dry-run "$target" | sed 's/GOARCH\=amd64/GOARCH\=arm64/ig')
              if [[ "$COMMAND" != *"GOARCH=arm64"* ]]; then
                  COMMAND=$(echo "$COMMAND" | sed -E 's/go\s+build/GOARCH\=arm64 go build/')
              fi
              echo "$COMMAND"
              bash -c "$COMMAND" 
          done


          du -sh ${{ steps.cache-init.outputs.go-build }}
          du -sh ${{ steps.cache-init.outputs.go-mod }}
      - name: Go Build
        if: steps.go-cache-restore.outputs.cache-hit != 'true' && env.architecture == 'arm64' && steps.cache-init.outputs.caller == 'no'
        env:
          GOPRIVATE: "github.com/infralight/*,github.com/gofireflyio/*"
        run: |

          if [ "${{ inputs.app-name }}" != "*" ]; then
            make ci-build-${{ inputs.app-name }} VERSION=${{ steps.vars.outputs.tag }} BUILD_TIME=${{ steps.vars.outputs.date }} COMMIT_SHA=${GITHUB_SHA} WORK_DIR=${GITHUB_WORKSPACE}
            exit 0
          fi

          # Run all targets
          targets="ci-build-cache $(grep '^ci-build-' [Mm]akefile | cut -d' ' -f1 | tr -d ':')"
          for target in $targets; do
              # Check if target exists in makefile
              if ! make --dry-run "$target" &>/dev/null; then
                continue 
              fi

              COMMAND=$(make --dry-run "$target" | sed 's/GOARCH\=amd64/GOARCH\=arm64/ig')
              if [[ "$COMMAND" != *"GOARCH=arm64"* ]]; then
                  COMMAND=$(echo "$COMMAND" | sed -E 's/go\s+build/GOARCH\=arm64 go build/')
              fi
              echo "$COMMAND"
              if bash -c "$COMMAND" 2>/dev/null; then
                  break
              fi
          done

