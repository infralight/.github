name: Reusable NodeJS Build ECR Image

on:
  workflow_call:
    inputs:
      arm64:
        type: boolean
        required: false
        default: false
      node-version:
        default: '1.18.2'
        required: false
        type: string
      custom:
        type: boolean
        required: false
        default: false
      ecr-prefix:
        type: string
        required: false
        default: ''
      run-tests:
        type: boolean
        required: false
        default: false
      trivy-scan:
        type: boolean
        required: false
        default: true
      custom-tests:
        type: boolean
        required: false
        default: false
      cmd-tests:
        type: string
        required: false
        default: "go test ./..."
      app-name:
        type: string
        required: true
      branch:
        type: string
        required: true
      event_name:
        type: string
        required: true
      environment:
        type: string
        default: 'dev'
        required: false
      cluster:
        type: string
        default: 'env1'
        required: false
      latest:
        type: boolean
        required: false
        default: false
      run:
        required: false
        type: string
    secrets:
      GLOBAL_PAT_USERNAME:
        required: true
      GLOBAL_PAT:
        required: true
      CI_AWS_CRED_KEY:
        required: true
      CI_AWS_CRED_SECRET:
        required: true
      CI_REGION:
        required: true
      CI_ACCOUNT_ID:
        required: true
jobs:
  tests:
    if: inputs.run-tests == true
    runs-on: 'ubuntu-latest'
    name: "Run Tests"
    steps:
      - run: |
          make test-${{ inputs.app-name }}
  build:
    environment: ${{ inputs.environment }}
    name: "Build & Push ECR Docker Image "
    runs-on: 'ubuntu-latest'
    env:
      HAVE_GLOBAL_PAT: ${{ secrets.GLOBAL_PAT != '' }}
      HAVE_RUN_CMD: ${{ inputs.run != '' }}
    outputs:
      tag: ${{ steps.build.outputs.tag }}
    steps:
      - uses: actions/checkout@v2
      - name: "[Build] configure git for private modules"
        if: ${{ env.HAVE_GLOBAL_PAT == 'true' }}
        run: git config --global url."https://${{ secrets.GLOBAL_PAT }}:x-oauth-basic@github.com".insteadOf "https://github.com"
      - name: Build Docker Image
        id: build
        if: ${{ !inputs.arm64 && env.HAVE_RUN_CMD == 'false' }}
        run: |
          make docker-build-${{ inputs.app-name }} ACCESS_TOKEN_USR=${{ secrets.GLOBAL_PAT_USERNAME }} ACCESS_TOKEN_PWD=${{ secrets.GLOBAL_PAT }}
          docker tag docker.io/library/tempimage ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.app-name }}:latest
          docker tag docker.io/library/tempimage ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.app-name }}:${GITHUB_SHA::6}
          echo "tag=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT
      - name: Set up QEMU
        if: ${{ inputs.arm64 }}
        uses: docker/setup-qemu-action@v2
        with:
          platforms: "arm64"
      - name: Build Docker Image [arm64]
        id: build-arm64
        if: ${{ env.HAVE_RUN_CMD == 'false' && inputs.arm64 }}
        run: |
          COMMAND=$(make --dry-run docker-build-${{ inputs.app-name }} ACCESS_TOKEN_USR=${{ secrets.GLOBAL_PAT_USERNAME }} ACCESS_TOKEN_PWD=${{ secrets.GLOBAL_PAT }})
          COMMAND=$(echo "$COMMAND" | sed -E 's/docker\s+buildx\s+build/docker buildx build \-\-platform\=linux\/arm64/ig')
          COMMAND=$(echo "$COMMAND" | sed -E 's/docker\s+build\s/docker build \-\-platform\=linux\/arm64 /ig')
          echo "$COMMAND" && echo "$COMMAND" | bash
          docker tag docker.io/library/tempimage ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.app-name }}:latest
          docker tag docker.io/library/tempimage ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.app-name }}:${GITHUB_SHA::6}
          echo "tag=${GITHUB_SHA::6}" >> $GITHUB_OUTPUT
      - name: "Run Trivy vulnerability scanner"
        if: ${{ inputs.trivy-scan && inputs.environment == 'dev' }}
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: docker.io/library/tempimage
          format: 'json'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          output: ${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && inputs.environment || inputs.cluster }}-trivy-${{ inputs.app-name }}-results.json
      - name: Upload Trivy scan results to S3
        if: ${{ inputs.environment == 'dev' }}
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --exclude '*' --include ${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && inputs.environment || inputs.cluster }}-trivy-${{ inputs.app-name }}-results.json
        env:
          AWS_S3_BUCKET: firefly-${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && inputs.environment || inputs.cluster }}-trivy-scans
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_CRED_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_CRED_SECRET }}
          AWS_REGION: ${{ secrets.CI_REGION }}
      - name: "configure aws credentials"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.CI_AWS_CRED_KEY }}
          aws-secret-access-key: ${{ secrets.CI_AWS_CRED_SECRET }}
          aws-region: ${{ secrets.CI_REGION }}
      - name: "login ecr"
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      - name: "upload image"
        if: (env.HAVE_RUN_CMD == 'false')
        run: |
          docker push ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.app-name }}:${GITHUB_SHA::6}
          if ${{inputs.latest}}; then docker push ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.app-name }}:latest; fi
      - name: "[Build]: build image & upload to ECR - CUSTOM"
        if: ${{ env.HAVE_RUN_CMD == 'true' }}
        run: ${{ inputs.run }}
