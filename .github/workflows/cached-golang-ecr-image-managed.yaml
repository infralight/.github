name: Reusable Golang Build ECR Image

on:
  workflow_call:
    inputs:
      skip-tests:
        type: boolean
        required: false
        default: false
        description: "Whether to skip running unit tests"
      ecr-prefix:
        type: string
        required: false
        default: ""
        description: "An ECR prefix to use when tagging Docker images"
      trivy-scan:
        type: boolean
        required: false
        default: true
        description: "Whether to scan the Docker image for vulnerabilities"
      app-name:
        type: string
        required: true
        description: "The name of the application to build"
      environment:
        type: string
        default: "dev"
        required: false
        description: "The Firefly environment into which to push images"
      cluster:
        type: string
        default: "env1"
        required: false
        description: "The deployment cluster"
      tag-latest:
        type: boolean
        required: false
        default: false
        description: "Whether to tag the Docker image as :latest as well"
    secrets:
      GLOBAL_PAT_USERNAME:
        required: true
      GLOBAL_PAT:
        required: true
      CI_AWS_CRED_KEY:
        required: true
      CI_AWS_CRED_SECRET:
        required: true
      CI_REGION:
        required: true
      CI_ACCOUNT_ID:
        required: true

jobs:
  default:
    name: Test, Build, Package and Push
    runs-on: [self-hosted, linux, x64]
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout Git repository
        uses: actions/checkout@v4

      - name: Get short commit hash
        uses: benjlevesque/short-sha@v3.0
        id: hash
        with:
          length: 8

      - name: Allow Go to download private Firefly dependencies
        run: git config --global url."https://${{ secrets.GLOBAL_PAT_USERNAME }}:${{ secrets.GLOBAL_PAT }}@github.com/".insteadOf "https://github.com/"

      - name: Setup Go toolchain
        uses: actions/setup-go@v5
        with:
          go-version-file: "go.mod"

      - name: Setup musl-libc
        run: |
          sudo apt-get update
          sudo apt-get install -y musl musl-dev musl-tools

      - name: Setup Docker Buildx plugin
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.CI_AWS_CRED_KEY }}
          aws-secret-access-key: ${{ secrets.CI_AWS_CRED_SECRET }}
          aws-region: ${{ secrets.CI_REGION }}

      - name: Install AWS CLI
        id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1

      - name: Run unit tests
        if: ${{ inputs.skip-tests != true }}
        #run: make ${{ format('test-{0}', inputs.app-name) }}
        run: make test

      - name: Compile application
        env:
          CC: musl-gcc
        run: make ${{ inputs.app-name }}

      - name: Package application into a Docker image
        env:
          ACCESS_TOKEN_USR: ${{ secrets.GLOBAL_PAT_USERNAME }}
          ACCESS_TOKEN_PWD: ${{ secrets.GLOBAL_PAT }}
          GITLEAKS_FILE_PATH: s3://${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && format('firefly-{0}-gitleaks-configuration/gitleaks.toml', inputs.environment) || format('firefly-{0}-gitleaks-configuration/gitleaks.toml', inputs.cluster) }}
        run: make ${{ inputs.app-name }}-docker

      - name: Tag image with commit hash
        run: docker tag ${{ inputs.app-name }}:${{ steps.hash.outputs.sha }} ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.ecr-prefix }}${{ inputs.app-name }}:${{ steps.hash.outputs.sha }}

      - name: Tag image as latest
        if: ${{ inputs.tag-latest }}
        run: docker tag ${{ inputs.app-name }}:${{ steps.hash.outputs.sha }} ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.ecr-prefix }}${{ inputs.app-name }}:latest

      - name: Run Trivy vulnerability scanner
        if: ${{ inputs.trivy-scan }}
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.ecr-prefix }}${{ inputs.app-name }}:${{ steps.hash.outputs.sha }}
          format: "json"
          exit-code: "0"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          output: ${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && inputs.environment || inputs.cluster }}-trivy-${{ inputs.app-name }}-results.json

      - name: Upload Trivy scan results to S3
        if: ${{ inputs.trivy-scan }}
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --exclude '*' --include ${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && inputs.environment || inputs.cluster }}-trivy-${{ inputs.app-name }}-results.json
        env:
          AWS_S3_BUCKET: firefly-${{ contains(fromJSON('["prod", "stag"]'), inputs.environment) && inputs.environment || inputs.cluster }}-trivy-scans
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_CRED_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_CRED_SECRET }}
          AWS_REGION: ${{ secrets.CI_REGION }}

      - name: Login to ECR registry
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr

      - name: "Push :SHA Docker image"
        run: docker push ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.ecr-prefix }}${{ inputs.app-name }}:${{ steps.hash.outputs.sha }}

      - name: "Push :latest Docker image"
        if: ${{ inputs.latest }}
        run: docker push ${{ secrets.CI_ACCOUNT_ID }}.dkr.ecr.${{ secrets.CI_REGION }}.amazonaws.com/${{ inputs.ecr-prefix }}${{ inputs.app-name }}:latest
