name: Reusable Frontend Build

on:
  workflow_call:
    inputs:
      node-version:
        default: '14.x'
        required: false
        type: string
      custom:
        type: boolean
        required: false
        default: false
      run-tests:
        type: boolean
        required: false
        default: false
      trivy-scan:
        type: boolean
        required: false
        default: false
      branch:
        type: string
        required: true
      environment:
        type: string
        default: 'dev'
        required: false
    secrets:
      CI_AWS_CRED_KEY:
        required: true
      CI_AWS_CRED_SECRET:
        required: true
      CI_REGION:
        required: true
      CI_ACCOUNT_ID:
        required: true
      CI_BACKEND_URL:
        required: true
      CI_AUTH0_CLIENT_ID:
        required: true
      CI_AUTH0_DOMAIN:
        required: true
      CI_FRONTEND_BUCKET:
        required: true
      CI_SLACK_WEBHOOK:
        required: true
      CI_DISTRIBUTION_ID:
        required: true
jobs:
  build:
    environment: ${{ inputs.environment }}
    name: "Frontend - Build & Deploy"
    runs-on: [self-hosted, "${{ inputs.environment }}"]
    steps:
      - uses: actions/checkout@v3.1.0
      - name: "Set up Node ${{ inputs.node-version }}"
        uses: actions/setup-node@v3.5.0
        with:
          node-version: ${{ inputs.node-version }}

      - name: setup config.js with environment
        run: ./scripts/set_vars.sh
        shell: bash
        env:
          AUTH0_CLIENT_ID: ${{ secrets.CI_AUTH0_CLIENT_ID }}
          AUTH0_DOMAIN: ${{ secrets.CI_AUTH0_DOMAIN }}
          AUTH0_NS: https://infralight.co
          AUTH0_AUDIENCE: infralight-api
          BACKEND_URL: ${{ secrets.CI_BACKEND_URL }}
          SSO_DOMAINS_OKTA: ${{ vars.SSO_DOMAINS_OKTA }}
          SSO_DOMAINS_AZURE: ${{ vars.SSO_DOMAINS_AZURE }}
          SSO_DOMAINS_PING: ${{ vars.SSO_DOMAINS_PING }}
      - name: Frontend build (npm)
        env:
          CI: "false"
        run: |
          npm install -g --legacy-peer-deps --only=prod --unsafe-perm
          NODE_OPTIONS="--max-old-space-size=8192" npm run build
      - name: Upload files
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks --delete --exclude='files/*'
        env:
          SOURCE_DIR: 'build'
          AWS_S3_BUCKET: ${{ secrets.CI_FRONTEND_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_CRED_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_CRED_SECRET }}
          AWS_REGION: ${{ secrets.CI_REGION }}
      - name: Invalidate Cloudfront
        uses: docker://public.ecr.aws/firefly/cloudfront-invalidation:v0.0.5
        env:
          PATHS: '/*'
          AWS_ACCESS_KEY_ID: ${{ secrets.CI_AWS_CRED_KEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.CI_AWS_CRED_SECRET }}
          AWS_REGION: ${{ secrets.CI_REGION }}
          DISTRIBUTION_ID: ${{ secrets.CI_DISTRIBUTION_ID }}
      - name: Slack Notification
        if: ${{ success() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff'
          SLACK_ICON: https://assets-global.website-files.com/5d514fd9493b0575f03520bd/5d8e0b39fd776a3c238e8753_icons8_infinity_large_filled_2.svg
          SLACK_MESSAGE: "Frontend (${{ inputs.environment }}) env successfully deployed from ${{ github.ref }}"
          SLACK_TITLE: "Frontend (${{ inputs.environment }}) deployment notification"
          SLACK_USERNAME: cicdBot
          SLACK_WEBHOOK: ${{ secrets.CI_SLACK_WEBHOOK }}
